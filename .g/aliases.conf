[alias]
    # branch
    b  = branch
    bc = checkout -b
    bl = branch -v
    bL = branch -av
    bx = branch -d
    bX = branch -D
    bm = branch -m
    bM = branch -M
    bs = show-branch
    bS = show-branch -a

    # checkout/fetch/merge/push/rebase
    # checkout
    co  = checkout
    co0 = checkout HEAD --
    # fetch
    f   = fetch
    fm  = pull
    fo  = fetch origin
    # merge
    m   = merge
    mom = merge origin/master
    # push
    p   = push
    pa  = push --all
    pt  = push --tags
    # rebase
    r   = rebase
    ra  = rebase --abort
    rc  = rebase --continue
    ri  = rebase --interactive
    rs  = rebase --skip
    rom = rebase origin/master

    # commit
    c      = commit -v
    ca     = commit --all -v
    cm     = commit --message
    cam    = commit --all --message
    camend = commit --amend --reuse-message HEAD
    cundo  = reset --soft "HEAD^"
    cp     = cherry-pick

    # diff
    d    = diff          # Diff working dir to index
    ds   = diff --staged # Diff index to HEAD
    dc   = diff --staged # Diff index to HEAD
    dh   = diff HEAD     # Diff working dir and index to HEAD
    hub  = browse
    hubd = compare

    # index
    s  = status
    a  = add
    ia = add
    ir = reset

    # log
    l   = log --topo-order --pretty=format:'%C(yellow)%h %C(cyan)%cn %C(blue)%cr%C(reset) %s'
    ls  = log --topo-order --stat --pretty=format:'%C(bold)%C(yellow)Commit:%C(reset) %C(yellow)%H%C(red)%d%n%C(bold)%C(yellow)Author:%C(reset) %C(cyan)%an <%ae>%n%C(bold)%C(yellow)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'
    ld  = log --topo-order --stat --patch --full-diff --pretty=format:'%C(bold)%C(yellow)Commit:%C(reset) %C(yellow)%H%C(red)%d%n%C(bold)%C(yellow)Author:%C(reset) %C(cyan)%an <%ae>%n%C(bold)%C(yellow)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'
    lg  = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    lga = log --topo-order --all --graph --pretty=format:'%C(yellow)%h %C(cyan)%cn%C(reset) %s %C(red)%d%C(reset)%n'
    lm  = log --topo-order --pretty=format:'%s'
    lh  = shortlog --summary --numbered
    llf = fsck --lost-found

    lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all

    # merge
    test-merge = merge --no-commit --no-ff

    # remote
    re  = remote
    rel = remote --verbose
    rea = remote add
    rex = remote rm
    rem = remote rename

    # grep
    grep = log --pretty=\"format:%Cgreen%H %Cblue%s\" --name-status --grep

    # https://gist.github.com/vitalybe/9efa951898af8c0d0912
	  safereset = "!f() { \
      trap 'echo ERROR: Operation failed; return' ERR; \
      echo Making sure there are no changes...; \
      last_status=$(git status --porcelain);\
      if [[ $last_status != \"\" ]]; then\
        echo There are dirty files:;\
        echo \"$last_status\";\
        echo;\
        echo -n \"Enter D if you would like to DISCARD these changes or W to commit them as WIP: \";\
        read dirty_operation;\
        if [ \"$dirty_operation\" == \"D\" ]; then \
          echo Resetting...;\
          git reset --hard;\
        elif [ \"$dirty_operation\" == \"W\" ]; then\
          echo Comitting WIP...;\
          git commit -a --message='WIP' > /dev/null && echo WIP Comitted;\
        else\
          echo Operation cancelled;\
          exit 1;\
        fi;\
      fi;\
    }; \
    f"

    rename = "!f() { git branch -m $1 $2; git push origin :$1; git push --set-upstream origin $2; }; f"

    unpushed-branches = "!git log --branches --not --remotes --no-walk --decorate --oneline"

    arc    = "! f() { git tag archive/$1 $1 && git branch -D $1;}; f"

    # From https://gist.github.com/492227
    head = log -n1
    heads = !"git log origin/master.. --format='%Cred%h%Creset;%C(yellow)%an%Creset;%H;%Cblue%f%Creset' | git name-rev --stdin --always --name-only | column -t -s';'"
    lost = !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

    missing-commits = !"git log -p --no-merges $1 ^development"

    #https://gist.github.com/rocketraman/1fdc93feb30aa00f6f3a9d7d732102a9
    tomerge = !sh -c 'git branch -r --no-merged ${2:-HEAD} | grep -Ev "HEAD" | grep -Ev \"(\\*|master|maint|next|proposed|demo-stable)\" | grep ${1:-.}' -
    aliases = config --get-regexp ^alias\\.
    fuckit = !"git reset --hard"
    hard-reset = !"git reset --hard && git clean -fx"

    #https://dev.to/wojciechko/git-alias-to-delete-merged-branches-3cop
    cleanup = "!f() { git branch --merged ${1:-master} | egrep -v \"(^\\*|${1:-master})\" | xargs --no-run-if-empty git branch -d; };f"
